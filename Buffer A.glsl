//2 ^ 4 = 16 0-F: 0000-1111
int GLYPHS[190] = int[190](0xFFFFFFFF, 0xFFFFFFFF, 0xF3FFF3F3, 0xF3F3FFFF, 0xFFFFFFFF, 
    0xFFDBC9FF, 0xFFFFC980, 0xC980C9FF, 0xE781A781, 0xE581E7FF, 0x9D99F3E7, 0xCF99B9FF, 
    0xFF839981, 0xE3DBC7FF, 0xFFFFFFFF, 0xFBF3F3FF, 0xFFE7F3FB, 0xFBF3E7FF, 0xFFF3E7EF, 
    0xEFE7F3FF, 0xFF99C3C3, 0x81E7FFFF, 0xFFF7F7C1, 0xF7F7FFFF, 0xF7F3F3FF, 0xFFFFFFFF, 
    0xFFFFFFC1, 0xFFFFFFFF, 0xFFE7E7FF, 0xFFFFFFFF, 0xFDF9F3E7, 0xCF9FBFFF, 0xFFC39999, 
    0x9999C3FF, 0xFFC3E7E7, 0xE7E3E7FF, 0xFF81F9C3, 0x9F99C3FF, 0xFFC3999F, 0xCF99C3FF, 
    0xFF9F9F81, 0x999999FF, 0xFFC3999F, 0xC1F981FF, 0xFFC39999, 0xC1F9C3FF, 0xFFF3F3E7, 
    0xCF9F81FF, 0xFFC39999, 0xC399C3FF, 0xFFC3999F, 0x8399C3FF, 0xFFF3F3FF, 0xF3F3FFFF, 
    0xF9F3F3FF, 0xF3F3FFFF, 0xEFE7F3F9, 0xF3E7EFFF, 0xFFFFC1FF, 0xFFC1FFFF, 0xFBF3E7CF, 
    0xE7F3FBFF, 0xE7FFE7C7, 0x9F99C3FF, 0xFFFFFFFF, 0xFFF3F9FF, 0xFF999981, 0x9999C3FF, 
    0xFFC19999, 0xC199C1FF, 0xFFC399F9, 0xF999C3FF, 0xFFC199B9, 0xB999C1FF, 0xFF81F9F9, 
    0xC1F981FF, 0xFFF9F9F9, 0xC1F981FF, 0xFF83B999, 0xF999C3FF, 0xFF999999, 0x819999FF, 
    0xFFC3E7E7, 0xE7E7C3FF, 0xFFF1E4E7, 0xE7E7C3FF, 0xFF99C9E1, 0xE1C999FF, 0xFF81F9F9, 
    0xF9F9F9FF, 0xFF9C9480, 0x80889CFF, 0xFF998981, 0x819199FF, 0xFFC39999, 0x9999C3FF, 
    0xFFF9F9C1, 0x9999C1FF, 0xFF8FC399, 0x9999C3FF, 0xFFB999C1, 0x9999C1FF, 0xFFC19F9F, 
    0xC3F983FF, 0xFFE7E7E7, 0xE7E781FF, 0xFFC39999, 0x999999FF, 0xFFE7C399, 0x999999FF, 
    0xFF9C8880, 0x949C9CFF, 0xFF9999C3, 0xE7C399FF, 0xFFE7E7E7, 0xC39999FF, 0xFF81F3E7, 
    0xCF9F81FF, 0xFFE1F9F9, 0xF9F9E1FF, 0xBF9FCFE7, 0xF3F9FDFF, 0xFFC3CFCF, 0xCFCFC3FF, 
    0xFFFFFFFF, 0xC9E3F7FF, 0xC1FFFFFF, 0xFFFFFFFF, 0xFFE3F98D, 0x8D99C3FF, 0xFF839983, 
    0x9FC3FFFF, 0xFFC19999, 0xC1F9F9FF, 0xFF83F9F9, 0xF983FFFF, 0xFF839999, 0x839F9FFF, 
    0xFFC3F981, 0x99C3FFFF, 0xFFF3F3F3, 0xC1F387FF, 0xC39F8399, 0x9983FFFF, 0xFF999999, 
    0xC1F9F9FF, 0xFFC3E7E7, 0xE3FFE7FF, 0xE3C9CFCF, 0xCFFFCFFF, 0xFF99C9E1, 0xC9D9F9FF, 
    0xFFE7E7E7, 0xE7E7E3FF, 0xFF9C9C94, 0x80C8FFFF, 0xFF999999, 0x99C1FFFF, 0xFFC39999, 
    0x99C3FFFF, 0xF9F9C199, 0x99C1FFFF, 0x9F9F8399, 0x9983FFFF, 0xFFF9F9F9, 0x99C1FFFF, 
    0xFFC18FC3, 0xF183FFFF, 0xFFCFE7E7, 0xE781E7FF, 0xFF839999, 0x9999FFFF, 0xFFE7C399, 
    0x9999FFFF, 0xFFC98094, 0x9C9CFFFF, 0xFF99C3E7, 0xC399FFFF, 0xC39F8399, 0x9999FFFF, 
    0xFF81F3E7, 0xCF81FFFF, 0xE7F3F3F9, 0xF3F3E7FF, 0xF3F3F3F3, 0xF3F3F3FF, 0xE7CFCF9F, 
    0xCFCFE7FF, 0xFFFFFFCD, 0x81B3FFFF);

void mainImage(out vec4 fragColor, vec2 fragCoord) {
    ivec2 Coord = ivec2(floor(fragCoord));
    int GlyphsPerRow = int(floor(iResolution.x)) / 8, 
        RowsNeeded = int(ceil(95.0 / float(GlyphsPerRow)));
    
    ivec2 Cell = (Coord / 8) % ivec2(GlyphsPerRow, RowsNeeded), 
        Pixel = ivec2(Coord.x % 8, Coord.y % 8);
    int CharCode = (Cell.y * GlyphsPerRow + Cell.x) % 95;
    
    Pixel.y = (7 - Pixel.y) % 4;
    
    int GlyphHalf = (Coord.y / 4) % 2, GlyphIndex = CharCode * 2 + GlyphHalf, 
        Glyph = GLYPHS[GlyphIndex], Mask = 1 << (Pixel.y * 8 + Pixel.x);
    
    if ((Glyph & Mask) == 0) {
       	fragColor = vec4(0.0, 0.0, 0.0, 1.0);
    
    } else {
	   	fragColor = vec4(1.0, 1.0, 1.0, 1.0);
    }
}
